/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as R404Import } from './routes/404'
import { Route as UsersIndexImport } from './routes/users/index'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const ProfileLazyImport = createFileRoute('/profile')()
const LoginLazyImport = createFileRoute('/login')()
const IndexLazyImport = createFileRoute('/')()
const RoutesIndexLazyImport = createFileRoute('/routes/')()
const RoutesServiceIndexLazyImport = createFileRoute('/routes/$service/')()
const RoutesServiceEditLazyImport = createFileRoute('/routes/$service/edit')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const ProfileLazyRoute = ProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const R404Route = R404Import.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RoutesIndexLazyRoute = RoutesIndexLazyImport.update({
  id: '/routes/',
  path: '/routes/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/routes/index.lazy').then((d) => d.Route))

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const RoutesServiceIndexLazyRoute = RoutesServiceIndexLazyImport.update({
  id: '/routes/$service/',
  path: '/routes/$service/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/routes/$service/index.lazy').then((d) => d.Route),
)

const RoutesServiceEditLazyRoute = RoutesServiceEditLazyImport.update({
  id: '/routes/$service/edit',
  path: '/routes/$service/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/routes/$service/edit.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404Import
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/routes/': {
      id: '/routes/'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/routes/$service/edit': {
      id: '/routes/$service/edit'
      path: '/routes/$service/edit'
      fullPath: '/routes/$service/edit'
      preLoaderRoute: typeof RoutesServiceEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/routes/$service/': {
      id: '/routes/$service/'
      path: '/routes/$service'
      fullPath: '/routes/$service'
      preLoaderRoute: typeof RoutesServiceIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/404': typeof R404Route
  '/login': typeof LoginLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/users': typeof UsersIndexRoute
  '/routes': typeof RoutesIndexLazyRoute
  '/routes/$service/edit': typeof RoutesServiceEditLazyRoute
  '/routes/$service': typeof RoutesServiceIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/404': typeof R404Route
  '/login': typeof LoginLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/users': typeof UsersIndexRoute
  '/routes': typeof RoutesIndexLazyRoute
  '/routes/$service/edit': typeof RoutesServiceEditLazyRoute
  '/routes/$service': typeof RoutesServiceIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/404': typeof R404Route
  '/login': typeof LoginLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/users/': typeof UsersIndexRoute
  '/routes/': typeof RoutesIndexLazyRoute
  '/routes/$service/edit': typeof RoutesServiceEditLazyRoute
  '/routes/$service/': typeof RoutesServiceIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/login'
    | '/profile'
    | '/settings'
    | '/users'
    | '/routes'
    | '/routes/$service/edit'
    | '/routes/$service'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/login'
    | '/profile'
    | '/settings'
    | '/users'
    | '/routes'
    | '/routes/$service/edit'
    | '/routes/$service'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/login'
    | '/profile'
    | '/settings'
    | '/users/'
    | '/routes/'
    | '/routes/$service/edit'
    | '/routes/$service/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  R404Route: typeof R404Route
  LoginLazyRoute: typeof LoginLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  UsersIndexRoute: typeof UsersIndexRoute
  RoutesIndexLazyRoute: typeof RoutesIndexLazyRoute
  RoutesServiceEditLazyRoute: typeof RoutesServiceEditLazyRoute
  RoutesServiceIndexLazyRoute: typeof RoutesServiceIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  R404Route: R404Route,
  LoginLazyRoute: LoginLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  UsersIndexRoute: UsersIndexRoute,
  RoutesIndexLazyRoute: RoutesIndexLazyRoute,
  RoutesServiceEditLazyRoute: RoutesServiceEditLazyRoute,
  RoutesServiceIndexLazyRoute: RoutesServiceIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/404",
        "/login",
        "/profile",
        "/settings",
        "/users/",
        "/routes/",
        "/routes/$service/edit",
        "/routes/$service/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/404": {
      "filePath": "404.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/routes/": {
      "filePath": "routes/index.lazy.tsx"
    },
    "/routes/$service/edit": {
      "filePath": "routes/$service/edit.lazy.tsx"
    },
    "/routes/$service/": {
      "filePath": "routes/$service/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
