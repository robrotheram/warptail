/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as RoutesIndexImport } from './routes/routes/index'
import { Route as RoutesRoutesIdImport } from './routes/routes/$routesId'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const CreateLazyImport = createFileRoute('/create')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const CreateLazyRoute = CreateLazyImport.update({
  path: '/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/create.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RoutesIndexRoute = RoutesIndexImport.update({
  path: '/routes/',
  getParentRoute: () => rootRoute,
} as any)

const RoutesRoutesIdRoute = RoutesRoutesIdImport.update({
  path: '/routes/$routesId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/routes/$routesId': {
      id: '/routes/$routesId'
      path: '/routes/$routesId'
      fullPath: '/routes/$routesId'
      preLoaderRoute: typeof RoutesRoutesIdImport
      parentRoute: typeof rootRoute
    }
    '/routes/': {
      id: '/routes/'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/create': typeof CreateLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/routes/$routesId': typeof RoutesRoutesIdRoute
  '/routes': typeof RoutesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/create': typeof CreateLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/routes/$routesId': typeof RoutesRoutesIdRoute
  '/routes': typeof RoutesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/create': typeof CreateLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/routes/$routesId': typeof RoutesRoutesIdRoute
  '/routes/': typeof RoutesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/create'
    | '/settings'
    | '/routes/$routesId'
    | '/routes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/create' | '/settings' | '/routes/$routesId' | '/routes'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/create'
    | '/settings'
    | '/routes/$routesId'
    | '/routes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LoginRoute: typeof LoginRoute
  CreateLazyRoute: typeof CreateLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  RoutesRoutesIdRoute: typeof RoutesRoutesIdRoute
  RoutesIndexRoute: typeof RoutesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LoginRoute: LoginRoute,
  CreateLazyRoute: CreateLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  RoutesRoutesIdRoute: RoutesRoutesIdRoute,
  RoutesIndexRoute: RoutesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/create",
        "/settings",
        "/routes/$routesId",
        "/routes/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/create": {
      "filePath": "create.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/routes/$routesId": {
      "filePath": "routes/$routesId.tsx"
    },
    "/routes/": {
      "filePath": "routes/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
