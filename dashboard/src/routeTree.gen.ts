/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as R404Import } from './routes/404'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as RoutesIndexImport } from './routes/routes/index'
import { Route as RoutesServiceIndexImport } from './routes/routes/$service/index'
import { Route as RoutesServiceEditImport } from './routes/routes/$service/edit'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const R404Route = R404Import.update({
  path: '/404',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UsersIndexRoute = UsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const RoutesIndexRoute = RoutesIndexImport.update({
  path: '/routes/',
  getParentRoute: () => rootRoute,
} as any)

const RoutesServiceIndexRoute = RoutesServiceIndexImport.update({
  path: '/routes/$service/',
  getParentRoute: () => rootRoute,
} as any)

const RoutesServiceEditRoute = RoutesServiceEditImport.update({
  path: '/routes/$service/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404Import
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/routes/': {
      id: '/routes/'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/routes/$service/edit': {
      id: '/routes/$service/edit'
      path: '/routes/$service/edit'
      fullPath: '/routes/$service/edit'
      preLoaderRoute: typeof RoutesServiceEditImport
      parentRoute: typeof rootRoute
    }
    '/routes/$service/': {
      id: '/routes/$service/'
      path: '/routes/$service'
      fullPath: '/routes/$service'
      preLoaderRoute: typeof RoutesServiceIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/404': typeof R404Route
  '/login': typeof LoginRoute
  '/settings': typeof SettingsLazyRoute
  '/routes': typeof RoutesIndexRoute
  '/users': typeof UsersIndexRoute
  '/routes/$service/edit': typeof RoutesServiceEditRoute
  '/routes/$service': typeof RoutesServiceIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/404': typeof R404Route
  '/login': typeof LoginRoute
  '/settings': typeof SettingsLazyRoute
  '/routes': typeof RoutesIndexRoute
  '/users': typeof UsersIndexRoute
  '/routes/$service/edit': typeof RoutesServiceEditRoute
  '/routes/$service': typeof RoutesServiceIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/404': typeof R404Route
  '/login': typeof LoginRoute
  '/settings': typeof SettingsLazyRoute
  '/routes/': typeof RoutesIndexRoute
  '/users/': typeof UsersIndexRoute
  '/routes/$service/edit': typeof RoutesServiceEditRoute
  '/routes/$service/': typeof RoutesServiceIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/login'
    | '/settings'
    | '/routes'
    | '/users'
    | '/routes/$service/edit'
    | '/routes/$service'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/login'
    | '/settings'
    | '/routes'
    | '/users'
    | '/routes/$service/edit'
    | '/routes/$service'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/login'
    | '/settings'
    | '/routes/'
    | '/users/'
    | '/routes/$service/edit'
    | '/routes/$service/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  R404Route: typeof R404Route
  LoginRoute: typeof LoginRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  RoutesIndexRoute: typeof RoutesIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  RoutesServiceEditRoute: typeof RoutesServiceEditRoute
  RoutesServiceIndexRoute: typeof RoutesServiceIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  R404Route: R404Route,
  LoginRoute: LoginRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  RoutesIndexRoute: RoutesIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  RoutesServiceEditRoute: RoutesServiceEditRoute,
  RoutesServiceIndexRoute: RoutesServiceIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/404",
        "/login",
        "/settings",
        "/routes/",
        "/users/",
        "/routes/$service/edit",
        "/routes/$service/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/404": {
      "filePath": "404.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/routes/": {
      "filePath": "routes/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/routes/$service/edit": {
      "filePath": "routes/$service/edit.tsx"
    },
    "/routes/$service/": {
      "filePath": "routes/$service/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
